val make : int -> ’a -> ’a parallel_array
# make 11 3;;
- : int parallel_array =
<[|3; 3|], [|3; 3|], [|3; 3|], [|3|], [|3|], [|3|], [|3|], [|3|]>
# 

val init : int -> (int -> ’a) -> ’a parallel_array
# init 10 id;;
- : int parallel_array =
<[|0; 1|], [|2; 3|], [|4|], [|5|], [|6|], [|7|], [|8|], [|9|]>
# 

val copy : ’a parallel_array -> ’a parallel_array
# copy (make 10 3);;
- : int parallel_array =
<[|3; 3|], [|3; 3|], [|3|], [|3|], [|3|], [|3|], [|3|], [|3|]>
# 

val of_array : ’a array -> ’a parallel_array
# of_array (Array.make 10 5);;
- : int parallel_array =
<[|5; 5|], [|5; 5|], [|5|], [|5|], [|5|], [|5|], [|5|], [|5|]>
# 

val to_array : ’a parallel_array -> ’a array
# to_array (make 10 5);;
- : int array = [|5; 5; 5; 5; 5; 5; 5; 5; 5; 5|]
# 

val distribution : ’a parallel_array -> int array
# distribution (make 11 'a');;
- : int array = [|2; 2; 2; 1; 1; 1; 1; 1|]
# 

val length : ’a parallel_array -> int
# length (make 15 '/');;
- : int = 15
# 

val get : ’a parallel_array -> int -> ’a
# get (init 10 id) 5;;
- : int = 5
# 

val set : ’a parallel_array -> int -> ’a -> unit
# let my_tab = init 10 id;;
val my_tab : int parallel_array =
  <[|0; 1|], [|2; 3|], [|4|], [|5|], [|6|], [|7|], [|8|], [|9|]>
# set my_tab 5 10000;;
- : unit = ()
# my_tab;;
- : int parallel_array =
<[|0; 1|], [|2; 3|], [|4|], [|10000|], [|6|], [|7|], [|8|], [|9|]>
# 

val fill : ’a parallel_array -> int -> int -> ’a -> unit
(*a completer !!!!!!!!!!!!!!!!!!!!*)

val map : (’a -> ’b) -> ’a parallel_array -> ’b parallel_array
# map (fun i -> i + 10) (init 10 id);;
- : int parallel_array =
<[|10; 11|], [|12; 13|], [|14|], [|15|], [|16|], [|17|], [|18|], [|19|]>
# 


val mapi : (int -> ’a -> ’b) -> ’a parallel_array -> ’b parallel_array
# mapi (fun i b -> i+b) (init 10 id);;
- : int parallel_array =
<[|0; 2|], [|4; 6|], [|8|], [|10|], [|12|], [|14|], [|16|], [|18|]>
# 

val reduce : (’a -> ’a -> ’a) -> ’a -> ’a parallel_array -> ’a
# reduce (fun a b -> a+b) 0 (init 10 id);;
- : int = 45
# 

val fold_left : (’a -> ’b -> ’a) -> ’a -> ’b parallel_array -> ’a
# fold_left (fun a b -> a+b) 10 (init 10 id);;
- : int = 55
# 

val sort : (’a -> ’a -> int) -> ’a parallel_array -> ’a parallel_array
# let my_tab = init 9 (fun i ->Random.int 100);; 
val my_tab : int parallel_array =
  <[|84; 81|], [|51|], [|39|], [|7|], [|15|], [|25|], [|37|], [|62|]>
# sort compare my_tab;;
- : int parallel_array =
<[|7; 15|], [|25|], [|37|], [|39|], [|51|], [|62|], [|81|], [|84|]>
# 

val balance : ’a parallel_array -> ’a parallel_array
# let my_tab = init 10 id;;
val my_tab : int parallel_array =
  <[|0; 1|], [|2; 3|], [|4|], [|5|], [|6|], [|7|], [|8|], [|9|]>
# balance my_tab;;
- : int parallel_array =
<[|4|], [|7|], [|2; 3|], [|8|], [|0; 1|], [|6|], [|9|], [|5|]>
# 

val sub : ’a parallel_array -> int -> int -> ’a parallel_array
# sub (init 10 id) 3 7;;
- : int parallel_array =
<[|3|], [|4|], [|5|], [|6|], [|7|], [|8|], [|9|], [||]>
# 

val blit :’a parallel_array -> int -> ’a parallel_array -> int -> int -> unit
(*a completer*)


































